// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $(function() {
    /* QuizItem Model
    */

    var App, AppView, QuizItem, QuizItemList, QuizItemView, QuizItems;
    QuizItem = (function(_super) {

      __extends(QuizItem, _super);

      function QuizItem() {
        return QuizItem.__super__.constructor.apply(this, arguments);
      }

      QuizItem.prototype.defaults = {
        question: "Unpopulated question",
        answer: "(Unanswered)",
        correctanswer: ""
      };

      QuizItem.prototype.initialize = function() {
        if (!this.get("answer")) {
          return this.set({
            "answer": this.defaults.answer
          });
        }
      };

      QuizItem.prototype.clear = function() {
        this.destroy();
        return this.view.remove();
      };

      return QuizItem;

    })(Backbone.Model);
    /* QuizItem Collection
    */

    QuizItemList = (function(_super) {

      __extends(QuizItemList, _super);

      function QuizItemList() {
        return QuizItemList.__super__.constructor.apply(this, arguments);
      }

      QuizItemList.prototype.model = QuizItem;

      QuizItemList.prototype.localStorage = new Store("flexiontest");

      QuizItemList.prototype.nextOrder = function() {
        if (!this.length) {
          return 1;
        }
        return this.last().get('order') + 1;
      };

      QuizItemList.prototype.comparator = function(quizitem) {
        return quizitem.get("order");
      };

      return QuizItemList;

    })(Backbone.Collection);
    /* QuizItem Item View
    */

    QuizItemView = (function(_super) {

      __extends(QuizItemView, _super);

      function QuizItemView() {
        this.updateOnEnter = __bind(this.updateOnEnter, this);
        this.close = __bind(this.close, this);
        this.edit = __bind(this.edit, this);
        this.render = __bind(this.render, this);        return QuizItemView.__super__.constructor.apply(this, arguments);
      }

      QuizItemView.prototype.tagName = "li";

      QuizItemView.prototype.template = _.template($("#item-template").html());

      QuizItemView.prototype.events = {
        "click div.quizitem-answer": "edit",
        "keypress .quizitem-input": "updateOnEnter"
      };

      QuizItemView.prototype.initialize = function() {
        this.model.bind('change', this.render);
        return this.model.view = this;
      };

      QuizItemView.prototype.render = function() {
        this.$(this.el).html(this.template(this.model.toJSON()));
        this.setAnswer();
        return this;
      };

      QuizItemView.prototype.setAnswer = function() {
        var answer;
        answer = this.model.get("answer");
        this.$(".quizitem-answer").text(answer);
        this.input = this.$(".quizitem-input");
        if (answer !== this.model.defaults.answer) {
          return this.$(".quizitem-input[value=" + answer + ']').attr('checked', 'checked');
        }
      };

      QuizItemView.prototype.edit = function() {
        this.$(this.el).addClass("editing");
        this.input.focus();
        this.input.bind("change", this.close);
      };

      QuizItemView.prototype.close = function() {
        var correctAnswerDisplay, selectedAnswer;
        selectedAnswer = this.$(":checked").val();
        this.model.save({
          answer: selectedAnswer
        });
        $(this.el).removeClass("editing");
        correctAnswerDisplay = $(this.el).find('.quizitem-correctanswer');
        if (selectedAnswer === this.model.get("correctanswer")) {
          correctAnswerDisplay.addClass('isCorrect');
        } else {
          correctAnswerDisplay.addClass('isWrong');
        }
        correctAnswerDisplay.fadeIn();
      };

      QuizItemView.prototype.updateOnEnter = function(e) {
        if (e.keyCode === 13) {
          return this.close();
        }
      };

      QuizItemView.prototype.remove = function() {
        return $(this.el).remove();
      };

      QuizItemView.prototype.clear = function() {
        return this.model.clear();
      };

      return QuizItemView;

    })(Backbone.View);
    /* The Application
    */

    AppView = (function(_super) {
      var el_tag;

      __extends(AppView, _super);

      function AppView() {
        this.addAll = __bind(this.addAll, this);
        this.addOne = __bind(this.addOne, this);
        this.render = __bind(this.render, this);
        this.initialize = __bind(this.initialize, this);        return AppView.__super__.constructor.apply(this, arguments);
      }

      el_tag = "#quizitemapp";

      AppView.prototype.el = $(el_tag);

      AppView.prototype.initialize = function() {
        this.input = this.$("#new-quizitem");
        QuizItems.bind("add", this.addOne);
        QuizItems.bind("reset", this.addAll);
        QuizItems.bind("all", this.render);
        return QuizItems.fetch();
      };

      AppView.prototype.render = function() {
        return this.$('#quizitem-stats').html();
      };

      AppView.prototype.addOne = function(quizitem) {
        var view;
        view = new QuizItemView({
          model: quizitem
        });
        return this.$("#quizitem-list").append(view.render().el);
      };

      AppView.prototype.addAll = function() {
        return QuizItems.each(this.addOne);
      };

      AppView.prototype.newAttributes = function() {
        return {
          answer: this.input.val(),
          order: QuizItems.nextOrder()
        };
      };

      AppView.prototype.createOnEnter = function(e) {
        if (e.keyCode !== 13) {
          return;
        }
        QuizItems.create(this.newAttributes());
        return this.input.val('');
      };

      AppView.prototype.clearCompleted = function() {
        _.each(QuizItems.done(), function(quizitem) {
          return quizitem.clear();
        });
        return false;
      };

      return AppView;

    })(Backbone.View);
    QuizItems = new QuizItemList();
    App = new AppView();
    if (QuizItems.length === 0) {
      return $.each([
        {
          "question": "Tim Berners-Lee invented the Internet.",
          "correctanswer": "true"
        }, {
          "question": "Dogs are better than cats.",
          "correctanswer": "false"
        }, {
          "question": "Winter is coming.",
          "correctanswer": "true"
        }, {
          "question": "Internet Explorer is the most advanced browser on Earth.",
          "correctanswer": "false"
        }
      ], function(i, q) {
        return QuizItems.create(q);
      });
    }
  });

}).call(this);
